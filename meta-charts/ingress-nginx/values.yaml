ingress-nginx:
  controller:
    allowSnippetAnnotations: true
    service:
      externalTrafficPolicy: "Local"    
      annotations: 
        cloud.google.com/network-tier: Standard
    autoscaling:
      enabled: true
      maxReplicas: 3
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    resources:
      limits:
        cpu: 50m
        memory: 150Mi
      requests:
        cpu: 10m
        memory: 150Mi
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: dedicated
              operator: In
              values:
              - infrastructure
    tolerations:
      - effect: NoSchedule
        key: dedicated
        operator: Equal
        value: infrastructure
    metrics:
      enabled: true
      serviceMonitor: 
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
    config:

      ### ModSecurity WAF https://kubernetes.github.io/ingress-nginx/user-guide/third-party-addons/modsecurity/#modsecurity-web-application-firewall
      enable-modsecurity: "true"
      enable-owasp-modsecurity-crs: "true"

      ### Headers 

      ## Hiding exposure
      hide-headers: Server,X-Powered-By

      ## Proxying source headers information from LB
      # accept and forward upstream proxy headers
      use-forwarded-headers: "true"
      # use-proxy-protocol: "true"
      # get originating client request IP
      enable-real-ip: "true"
      # full Client Traceability during the transport
      compute-full-forwarded-for: "true"
      # original URI requested by the client is preserved and forwarded to the backend server as a custom header
      proxy-add-original-uri-header: "true"
  
      ### Hardening https://kubernetes.github.io/ingress-nginx/deploy/hardening-guide/#hardening-guide

      ## TLS
      #308 Permanent Redirect (redirect but change HTTP Method)
      force-ssl-redirect: "true"
      #301 Moved Permanently (redirect but keep HTTP Method)
      ssl-redirect: "true"
      #Use fresh and improved TLS Protocol 
      ssl-protocols: "TLSv1.3"       
      #ssl_prefer_server_ciphers directive will be enabled by default for http context
      #Use stronger chiphers 
      ssl-ciphers: "EECDH+AESGCM:EDH+AESGCM"
      #ssl-dh-param to be check later/needs secret
      # protocol that allows clients to check the revocation status of a TLS/SSL certificate with the Certificate Authority in real-time
      enable-ocsp: "true"
      ssl-session-tickets: "false"

      ### Observability

      ##Metrics
      # ServiceMonitor enabled from chart

      ##Tracing
      enable-opentelemetry: "true"
      opentelemetry-operation-name: "HTTP $request_method $service_name $uri"
      opentelemetry-trust-incoming-span: "true"
      otlp-collector-host: "otel-collector.observability.svc.cluster.local"
      otlp-collector-port: "4317"
      otel-max-queuesize: "2048"
      otel-schedule-delay-millis: "5000"
      otel-max-export-batch-size: "512"
      otel-service-name: "nginx-controller" # Opentelemetry resource name
      otel-sampler: "TraceIdRatioBased" # Also: AlwaysOff, TraceIdRatioBased
      otel-sampler-ratio: "0.1" #probability to sample requests
      otel-sampler-parent-based: "true"

      ##Logging
      log-format-escape-json: "true"
      enable-access-log-for-default-backend: "true"
      log-format-upstream: >-
        {
        "time":"$time_iso8601",
        "remote_addr":"$remote_addr",
        "x-forward-for": "$proxy_add_x_forwarded_for",
        "proxy_remote_addr": "$proxy_protocol_addr",
        "body_bytes_sent":"$body_bytes_sent",
        "bytes_sent": $bytes_sent,
        "host":"$host",
        "http_referrer":"$http_referer",
        "http_user_agent":"$http_user_agent",
        "x_forwarded_for":"$proxy_add_x_forwarded_for",
        "proxy_upstream_name":"$proxy_upstream_name",
        "request":"$request",
        "request_id":"$req_id",
        "request_length":"$request_length",
        "request_method":"$request_method",
        "request_path":"$uri",
        "request_proto":"$server_protocol",
        "request_query":"$args",
        "request_time":"$request_time",
        "status":"$status",
        "upstream_addr":"$upstream_addr",
        "upstream_response_length":"$upstream_response_length",
        "upstream_response_time":"$upstream_response_time",
        "upstream_status":"$upstream_status"
        }
