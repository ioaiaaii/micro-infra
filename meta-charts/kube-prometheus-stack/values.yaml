commonTolerations: &commonTolerations
  - effect: "NoSchedule"
    key: "dedicated"
    operator: "Equal"
    value: "infrastructure"

commonNodeAffinity: &commonNodeAffinity
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
      - matchExpressions:
          - key: "dedicated"
            operator: "In"
            values:
              - "infrastructure"

commonResources: &commonResources
  requests:
    cpu: "100m"
    memory: "128Mi"

kube-prometheus-stack:
  defaultRules:
    rules:
      windows: false
  prometheusOperator:
    resources:
      requests:
        cpu: "10m"
        memory: "50Mi"    

    affinity:
      nodeAffinity: *commonNodeAffinity  # Use YAML anchor if defining common affinity
    tolerations: *commonTolerations  # Reuse common tolerations

  prometheus:
    prometheusSpec:
      #Allow serviceMonitor discovery on all ns, without selectors
      serviceMonitorSelectorNilUsesHelmValues: false
      enableRemoteWriteReceiver: true
      tolerations: *commonTolerations
      affinity:
        nodeAffinity: *commonNodeAffinity
      resources:
        requests:
          cpu: "100m"
          memory: "400Mi"            
      retention: 30d
      retentionSize: 18GB
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: standard-rwo
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 20Gi
  alertmanager:
    enabled: false

  grafana:
    tolerations: *commonTolerations
    nodeAffinity: *commonNodeAffinity
    resources:
      requests:
        cpu: "50m"
        memory: "300Mi"    
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-cluster-issuer
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/auth-tls-secret: infrastructure/mtls-ca-secret  # CA certificate secret
        nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
        nginx.ingress.kubernetes.io/enable-opentelemetry: "false"
      ingressClassName: "nginx"
      hosts:
        - grafana.ioaiaaii.net
      tls:
      - hosts:
        - grafana.ioaiaaii.net
        secretName: letsencrypt-cluster-cert-ioaiaaii 
    additionalDataSources:
    - name: Tempo
      type: tempo
      access: proxy
      orgId: 1
      url: http://tempo.observability:3100/    
      basicAuth: false
      uid: tempo
      jsonData:
        # tracesToMetrics:
        #   datasourceUid: 'prometheus'
        #   spanStartTimeShift: '1h'
        #   spanEndTimeShift: '-1h'
        #   tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
        #   queries:
        #     - name: 'Sample query'
        #       query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
        serviceMap:
          datasourceUid: 'prometheus'
        nodeGraph:
          enabled: true
        search:
          hide: false
        # traceQuery:
        #   timeShiftEnabled: true
        #   spanStartTimeShift: '1h'
        #   spanEndTimeShift: '-1h'
        spanBar:
          type: 'Tag'
          tag: 'http.path'
